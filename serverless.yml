service: jira-webhooks

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true

provider:
  name: aws
  runtime: python2.7
  region: us-west-2

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  environment:
    JIRA_URL: ${ssm:JIRA_URL}
    JIRA_USER: ${ssm:JIRA_USER}
    JIRA_PASS: ${ssm:JIRA_PASS~true}
    JIRA_JQL_FOR_TOP_ISSUE: ${ssm:JIRA_JQL_FOR_TOP_ISSUE}

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  rank_issue_highest_on_todo:
    handler: webhooks.rank_issue_highest.on_todo
    events:
      - http:
          path: rank_issue_highest_on_todo
          method: POST

  auto_up_next_on_done:
    handler: webhooks.auto_up_next.on_done
    events:
      - http:
          path: auto_up_next_on_done
          method: POST

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2
